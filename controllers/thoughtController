const { User, Thought } = require('../models');

module.exports = {

//////////////  -------  /api/thoughts


// GET all thoughts
getThoughts(req, res) {
    Thought.find()
        .then((thoughts) => res.json(thoughts))
        .catch((err) => res.status(500).json(err));
},

// GET single thoughts by _id
getSingleThought(req, res) {
    Thought.findOne({ _id: req.params.thoughtId })
        .then((thought) =>
            !thought
                ? res.status(404).json({ message: 'No thought found with that ID' })
                : res.json(thought)
        )
        .catch((err) => res.status(500).json(err));
},

// POST to create a new thought (don't forget to push the created thought's _id to the associated user's thoughts array field)
createThought(req, res) {
    Thought.create(req.body) // create a new thought and accepts request body with entire thought object
        .then((thought) => {
        return User.findOneAndUpdate(
            { _id: req.body.userId },
            { $addToSet: { thoughts: thoughts._id } }, // TO DO: should this be $push? should this be thought singular? thoughts are associated w/ Users, need to update User who created the thought and add the ID of the thought to the thoughts array 
            { new: true }
        );
    })
        .then((user) =>
            !user
                ? res.status(404).json({
                message: 'Thought has been created but no user with this ID',
                })
                : res.json('Thought created!')
    )
        .catch((err) => {
        console.log(err);
        res.status(500).json(err);
    });
},

// PUT to update a thought by its _id
updateThought(req, res) {
    Thought.findOneAndUpdate( // updates with findOneAndUpdate method.
        { _id: req.params.thoughtId }, // uses ID and $set operator from mongoDB to inject the request.body
        { $set: req.body },
        { runValidators: true, new: true } // enforces validation
    )
        .then((thought) =>
            !thought
                ? res.status(404).json({ message: 'No thought with this id!' })
                : res.json(thought)
    )
        .catch((err) => {
            console.log(err);
            res.status(500).json(err);
    });
},


// DELETE to remove a thought by its _id
deleteThought(req, res) {
    Thought.findOneAndRemove({ _id: req.params.thoughtId }) //if thought exists, look for any users associated with thought based on thought ID
        .then((thought) =>
            !thought
                ? res.status(404).json({ message: 'No thought with this ID' })
                : User.findOneAndUpdate( // update the thoughts array for the User. remove thought id from user's thoughts field
                    { thoughts: req.params.thoughtId },
                    { $pull: { thoughts: req.params.thoughtId } },
                    { new: true }
                )
        )
        .then((user) =>
            !user
                ? res.status(404).json({
                message: 'Thought has been created but no user with this ID',
                })
                : res.json({ message: 'Thought successfully deleted!' })
        )
        .catch((err) => res.status(500).json(err));
},


//////////////  -------  /api/thoughts/:thoughtId/reactions


// POST to create a reaction stored in a single thought's reactions array field
addReaction(req, res) {
    Thought.findOneAndUpdate(
        { _id: req.params.thoughtId },
        { $addToSet: { reactions: req.body } }, // adds entire body of reaction rather than the ID with $addToSet operator
        { runValidators: true, new: true }
    )
    .then((thought) =>
        !thought
            ? res.status(404).json({ message: 'No thought associated with this id!' })
            : res.json(thought)
    )
    .catch((err) => res.status(500).json(err));
},



// DELETE to pull and remove a reaction by the reaction's reactionId value
removeReaction(req, res) {
    Thought.findOneAndUpdate(
        { _id: req.params.thoughtId },
        { $pull: { reactions: { reactionId: req.params.reactionId } } }, // updates reactions array associated with thought by removing it's reactionId from the reactions array
        { runValidators: true, new: true }
    )
    .then((thought) =>
        !thought
            ? res.status(404).json({ message: 'No thought associated with this id!' })
            : res.json(thought)
    )
    .catch((err) => res.status(500).json(err));
},



}